#!/usr/bin/pscript

userlog("Generate local unit test");

//Include wizard base.
compilestring(getwizardbase())();

//Provision class
class CLocalTestCase extends WizardBase {

	constructor()
	{
		base.constructor();
	}
	
	//Configure it:

	</ order=1, name = "test number", type = "number", min=0, max=999 /> 
	testid = "";

	</ order=2, name = "test code name", type = "string", min=1, max=16 /> 
	testcode = "";
	
	</ order=3, name = "Unit test description", type = "string", min=1, max=999 /> 
	descr = "";
	
    </ order=4, name = "Domain 1", type = "yn"/> 
    dom1 = "n";
    
    </ order=5, name = "Domain 2", depend="(::prov.dom1==\"y\")", type = "yn"/> 
    dom2 = "n";

	testname = "";
	client = "";
	server = "";
	make = "";
	debug = "";
	run = "";
	hdr = "";
	
	dom1_debug = "";
	dom1_ndrxconf = "";
	
    dom2_debug = "";
    dom2_ndrxconf = "";
	
	function getOutputFiles()
	{
		testname = format("test%03d_%s", testid.tointeger(), testcode);

		mkdir (testname);

		client = format("%s/atmiclt%d.c", testname, testid.tointeger());
		server = format("%s/atmisv%d.c", testname, testid.tointeger());
		make = format("%s/CMakeLists.txt", testname);
		debug = format("%s/debug.conf", testname);
		run = format("%s/run.sh", testname);
		hdr = format("%s/test%d.h", testname, testid.tointeger());
		
		dom1_debug = format("%s/debug-dom1.conf", testname);
        dom1_ndrxconf = format("%s/ndrxconfig-dom1.xml", testname);
        
        dom2_debug = format("%s/debug-dom2.conf", testname);
        dom2_ndrxconf = format("%s/ndrxconfig-dom2.xml", testname);
    
	}
	
}
	

//Run the mater installer
function install() 
{
	local root = getroottable();

	//Create a provision object
	root["prov"] <- CLocalTestCase();

	if (!::prov.isDefaulted)
	{
		::prov.runInteractive();
	}

	if (::prov.validatAndPrintConfig())
	{
		::prov.getOutputFiles();
		print(format("Test case: [%s]\n", ::prov.testname));

		
//
// Common header file
//
        if (!::prov.writeFile(::prov.hdr,

@"/**
 * @brief "+::prov.descr+@" - common header
 *
 * @file test"+::prov.testname+@".h
 */
/* -----------------------------------------------------------------------------
 * Enduro/X Middleware Platform for Distributed Transaction Processing
 * Copyright (C) 2009-2016, ATR Baltic, Ltd. All Rights Reserved.
 * Copyright (C) 2017-2018, Mavimax, Ltd. All Rights Reserved.
 * This software is released under one of the following licenses:
 * GPL or Mavimax's license for commercial use.
 * -----------------------------------------------------------------------------
 * GPL license:
 * 
 * This program is free software; you can redistribute it and/or modify it under
 * the terms of the GNU General Public License as published by the Free Software
 * Foundation; either version 3 of the License, or (at your option) any later
 * version.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT ANY
 * WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A
 * PARTICULAR PURPOSE. See the GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License along with
 * this program; if not, write to the Free Software Foundation, Inc., 59 Temple
 * Place, Suite 330, Boston, MA 02111-1307 USA
 *
 * -----------------------------------------------------------------------------
 * A commercial use license is available from Mavimax, Ltd
 * contact@mavimax.com
 * -----------------------------------------------------------------------------
 */
#ifndef TEST"+::prov.testid+@"_H
#define TEST"+::prov.testid+@"_H

#ifdef  __cplusplus
extern ""C"" {
#endif


#define VALUE_EXPECTED ""Hello EnduroX""

#ifdef  __cplusplus
}
#endif

#endif  /* TEST"+::prov.testid+@"_H */

/* vim: set ts=4 sw=4 et smartindent: */
"))
        {
            return false;
        }
//
// Client code
//
		if (!::prov.writeFile(::prov.client, 

@"/**
 * @brief "+::prov.descr+@" - client
 *
 * @file atmiclt"+::prov.testid+@".c
 */
/* -----------------------------------------------------------------------------
 * Enduro/X Middleware Platform for Distributed Transaction Processing
 * Copyright (C) 2009-2016, ATR Baltic, Ltd. All Rights Reserved.
 * Copyright (C) 2017-2018, Mavimax, Ltd. All Rights Reserved.
 * This software is released under one of the following licenses:
 * AGPL or Mavimax's license for commercial use.
 * -----------------------------------------------------------------------------
 * AGPL license:
 * 
 * This program is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Affero General Public License, version 3 as published
 * by the Free Software Foundation;
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT ANY
 * WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A
 * PARTICULAR PURPOSE. See the GNU Affero General Public License, version 3
 * for more details.
 *
 * You should have received a copy of the GNU Affero General Public License along 
 * with this program; if not, write to the Free Software Foundation, Inc., 
 * 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
 *
 * -----------------------------------------------------------------------------
 * A commercial use license is available from Mavimax, Ltd
 * contact@mavimax.com
 * -----------------------------------------------------------------------------
 */
#include <string.h>
#include <stdio.h>
#include <stdlib.h>
#include <memory.h>
#include <math.h>

#include <atmi.h>
#include <ubf.h>
#include <ndebug.h>
#include <test.fd.h>
#include <ndrstandard.h>
#include <nstopwatch.h>
#include <fcntl.h>
#include <unistd.h>
#include <nstdutil.h>
#include ""test"+::prov.testid+@".h""
/*---------------------------Externs------------------------------------*/
/*---------------------------Macros-------------------------------------*/
/*---------------------------Enums--------------------------------------*/
/*---------------------------Typedefs-----------------------------------*/
/*---------------------------Globals------------------------------------*/
/*---------------------------Statics------------------------------------*/
/*---------------------------Prototypes---------------------------------*/

/**
 * Do the test call to the server
 */
int main(int argc, char** argv)
{

    UBFH *p_ub = (UBFH *)tpalloc(""UBF"", NULL, 56000);
    long rsplen;
    int i;
    int ret=EXSUCCEED;
    
    if (EXFAIL==CBchg(p_ub, T_STRING_FLD, 0, VALUE_EXPECTED, 0, BFLD_STRING))
    {
        NDRX_LOG(log_debug, ""Failed to set T_STRING_FLD[0]: %s"", Bstrerror(Berror));
        ret=EXFAIL;
        goto out;
    }    

    if (EXFAIL == tpcall(""TESTSV"", (char *)p_ub, 0L, (char **)&p_ub, &rsplen,0))
    {
        NDRX_LOG(log_error, ""TESTSV failed: %s"", tpstrerror(tperrno));
        ret=EXFAIL;
        goto out;
    }
    
out:
    tpterm();
    fprintf(stderr, ""Exit with %d\n"", ret);

    return ret;
}

/* vim: set ts=4 sw=4 et smartindent: */
"))
		{
			return false;
		}

//
// server code
//
		if (!::prov.writeFile(::prov.server, 

@"/**
 * @brief "+::prov.descr+@" - server
 *
 * @file atmisv"+::prov.testid+@".c
 */
/* -----------------------------------------------------------------------------
 * Enduro/X Middleware Platform for Distributed Transaction Processing
 * Copyright (C) 2009-2016, ATR Baltic, Ltd. All Rights Reserved.
 * Copyright (C) 2017-2018, Mavimax, Ltd. All Rights Reserved.
 * This software is released under one of the following licenses:
 * AGPL or Mavimax's license for commercial use.
 * -----------------------------------------------------------------------------
 * AGPL license:
 * 
 * This program is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Affero General Public License, version 3 as published
 * by the Free Software Foundation;
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT ANY
 * WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A
 * PARTICULAR PURPOSE. See the GNU Affero General Public License, version 3
 * for more details.
 *
 * You should have received a copy of the GNU Affero General Public License along 
 * with this program; if not, write to the Free Software Foundation, Inc., 
 * 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
 *
 * -----------------------------------------------------------------------------
 * A commercial use license is available from Mavimax, Ltd
 * contact@mavimax.com
 * -----------------------------------------------------------------------------
 */
#include <stdio.h>
#include <stdlib.h>
#include <ndebug.h>
#include <atmi.h>
#include <ndrstandard.h>
#include <ubf.h>
#include <test.fd.h>
#include <string.h>
#include <unistd.h>
#include ""test"+::prov.testid+@".h""

/*---------------------------Externs------------------------------------*/
/*---------------------------Macros-------------------------------------*/
/*---------------------------Enums--------------------------------------*/
/*---------------------------Typedefs-----------------------------------*/
/*---------------------------Globals------------------------------------*/
/*---------------------------Statics------------------------------------*/
/*---------------------------Prototypes---------------------------------*/

/**
 * Standard service entry
 */
void TESTSV (TPSVCINFO *p_svc)
{
    int ret=EXSUCCEED;
    char testbuf[1024];
    UBFH *p_ub = (UBFH *)p_svc->data;

    NDRX_LOG(log_debug, ""%s got call"", __func__);

    /* Just print the buffer */
    Bprint(p_ub);
    
    if (EXFAIL==Bget(p_ub, T_STRING_FLD, 0, testbuf, 0))
    {
        NDRX_LOG(log_error, ""TESTERROR: Failed to get T_STRING_FLD: %s"", 
                 Bstrerror(Berror));
        ret=EXFAIL;
        goto out;
    }
    
    if (0!=strcmp(testbuf, VALUE_EXPECTED))
    {
        NDRX_LOG(log_error, ""TESTERROR: Expected: [%s] got [%s]"",
            VALUE_EXPECTED, testbuf);
        ret=EXFAIL;
        goto out;
    }
        
    
out:
    tpreturn(  ret==EXSUCCEED?TPSUCCESS:TPFAIL,
                0L,
                (char *)p_ub,
                0L,
                0L);
}

/**
 * Do initialisation
 */
int NDRX_INTEGRA(tpsvrinit)(int argc, char **argv)
{
    int ret = EXSUCCEED;
    NDRX_LOG(log_debug, ""tpsvrinit called"");

    if (EXSUCCEED!=tpadvertise(""TESTSV"", TESTSV))
    {
        NDRX_LOG(log_error, ""Failed to initialise TESTSV!"");
        EXFAIL_OUT(ret);
    }
out:
    return ret;
}

/**
 * Do de-initialisation
 */
void NDRX_INTEGRA(tpsvrdone)(void)
{
    NDRX_LOG(log_debug, ""tpsvrdone called"");
}

/* vim: set ts=4 sw=4 et smartindent: */
"))
		{
			return false;
		}
//
// Makefile
//
		if (!::prov.writeFile(::prov.make, 

@"##
## @brief "+::prov.descr+@" - server
##
## @file atmisv"+::prov.testid+@".c
##
## -----------------------------------------------------------------------------
## Enduro/X Middleware Platform for Distributed Transaction Processing
## Copyright (C) 2009-2016, ATR Baltic, Ltd. All Rights Reserved.
## Copyright (C) 2017-2018, Mavimax, Ltd. All Rights Reserved.
## This software is released under one of the following licenses:
## AGPL or Mavimax's license for commercial use.
## -----------------------------------------------------------------------------
## AGPL license:
## 
## This program is free software; you can redistribute it and/or modify it under
## the terms of the GNU Affero General Public License, version 3 as published
## by the Free Software Foundation;
##
## This program is distributed in the hope that it will be useful, but WITHOUT ANY
## WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A
## PARTICULAR PURPOSE. See the GNU Affero General Public License, version 3
## for more details.
##
## You should have received a copy of the GNU Affero General Public License along 
## with this program; if not, write to the Free Software Foundation, Inc., 
## 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
##
## -----------------------------------------------------------------------------
## A commercial use license is available from Mavimax, Ltd
## contact@mavimax.com
## -----------------------------------------------------------------------------
##

cmake_minimum_required(VERSION 2.8)

# Make sure the compiler can find include files from UBF library
include_directories (${ENDUROX_SOURCE_DIR}/libubf
					 ${ENDUROX_SOURCE_DIR}/include
					 ${ENDUROX_SOURCE_DIR}/libnstd
					 ${ENDUROX_SOURCE_DIR}/ubftest)


# Add debug options
# By default if RELEASE_BUILD is not defined, then we run in debug!
IF ($ENV{RELEASE_BUILD})
	# do nothing
ELSE ($ENV{RELEASE_BUILD})
	ADD_DEFINITIONS(""-D NDRX_DEBUG"")
ENDIF ($ENV{RELEASE_BUILD})

# Make sure the linker can find the UBF library once it is built.
link_directories (${ENDUROX_BINARY_DIR}/libubf) 

############################# Test - executables ###############################
add_executable (atmi.sv"+::prov.testid+@" atmisv"+::prov.testid+@".c ../../libatmisrv/rawmain_integra.c)
add_executable (atmiclt"+::prov.testid+@" atmiclt"+::prov.testid+@".c)
################################################################################
############################# Test - executables ###############################
# Link the executable to the ATMI library & others...
target_link_libraries (atmi.sv"+::prov.testid+@" atmisrvinteg atmi ubf nstd m pthread ${RT_LIB})
target_link_libraries (atmiclt"+::prov.testid+@" atmiclt atmi ubf nstd m pthread ${RT_LIB})

set_target_properties(atmi.sv"+::prov.testid+@" PROPERTIES LINK_FLAGS ""$ENV{MYLDFLAGS}"")
set_target_properties(atmiclt"+::prov.testid+@" PROPERTIES LINK_FLAGS ""$ENV{MYLDFLAGS}"")
################################################################################

# vim: set ts=4 sw=4 et smartindent:
"))
		{
			return false;
		}

//
// Debug configuration
//
		if ("n"==::prov.dom1 && "n"==::prov.dom2 && !::prov.writeFile(::prov.debug, 

@"* ndrx=5 ubf=1 lines=1 bufsz=1000 file=${TESTDIR}/ndrx.log
atmiclt"+::prov.testid+@" file=${TESTDIR}/atmiclt"+::prov.testid+@".log
atmi.sv"+::prov.testid+@" file=${TESTDIR}/atmisv"+::prov.testid+@".log

"))
		{
			return false;
		}
//
// Run file (local one)
//
		if ("n"==::prov.dom1 && "n"==::prov.dom2 && !::prov.writeFile(::prov.run, 

@"#!/bin/bash
##
## @brief "+::prov.descr+@" - test launcher
##
## @file run.sh
##
## -----------------------------------------------------------------------------
## Enduro/X Middleware Platform for Distributed Transaction Processing
## Copyright (C) 2009-2016, ATR Baltic, Ltd. All Rights Reserved.
## Copyright (C) 2017-2018, Mavimax, Ltd. All Rights Reserved.
## This software is released under one of the following licenses:
## AGPL or Mavimax's license for commercial use.
## -----------------------------------------------------------------------------
## AGPL license:
## 
## This program is free software; you can redistribute it and/or modify it under
## the terms of the GNU Affero General Public License, version 3 as published
## by the Free Software Foundation;
##
## This program is distributed in the hope that it will be useful, but WITHOUT ANY
## WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A
## PARTICULAR PURPOSE. See the GNU Affero General Public License, version 3
## for more details.
##
## You should have received a copy of the GNU Affero General Public License along 
## with this program; if not, write to the Free Software Foundation, Inc., 
## 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
##
## -----------------------------------------------------------------------------
## A commercial use license is available from Mavimax, Ltd
## contact@mavimax.com
## -----------------------------------------------------------------------------
##

TESTNAME="""+::prov.testname+@"""

PWD=`pwd`
if [ `echo $PWD | grep $TESTNAME ` ]; then
	# Do nothing 
	echo > /dev/null
else
	# started from parent folder
	pushd .
	echo ""Doing cd""
	cd "+::prov.testname+@"
fi;

. ../testenv.sh

export TESTDIR=""$NDRX_APPHOME/atmitest/$TESTNAME""
export PATH=$PATH:$TESTDIR

xadmin killall atmi.sv"+::prov.testid+@" 2>/dev/null
xadmin killall atmiclt"+::prov.testid+@" 2>/dev/null

# client timeout
export NDRX_TOUT=10
export NDRX_DEBUG_CONF=`pwd`/debug.conf

function go_out {
    echo ""Test exiting with: $1""
    xadmin killall atmi.sv"+::prov.testid+@" 2>/dev/null
    xadmin killall atmiclt"+::prov.testid+@" 2>/dev/null
    
    popd 2>/dev/null
    exit $1
}


rm *.log

(./atmi.sv"+::prov.testid+@" -i123 2>&1) > ./atmisv"+::prov.testid+@".log &
sleep 1
(./atmiclt"+::prov.testid+@" 2>&1) > ./atmiclt"+::prov.testid+@".log

RET=$?

# Catch is there is test error!!!
if [ ""X`grep TESTERROR *.log`"" != ""X"" ]; then
	echo ""Test error detected!""
	go_out -2
fi

go_out $RET

# vim: set ts=4 sw=4 et smartindent:

"))
		{
			return false;
		}
//
// Domain 1 XML configuration
//
        if ("y"==::prov.dom1 && !::prov.writeFile(::prov.dom1_ndrxconf, 

@"<?xml version=""1.0"" ?>
<endurox>
    <appconfig>
        <!-- ALL BELLOW ONES USES <sanity> periodical timer  -->
        <!-- Sanity check time, sec -->
        <sanity>1</sanity>
        <!-- If process have been state changed to other than dead, exit or not running
        but PID of program does not exists in system, then send internel message, then 
        program have been stopped.
        In Seconds.
        -->
        <checkpm>5</checkpm>
        <!--  <sanity> timer, end -->
        <!-- ALL BELLOW ONES USES <respawn> periodical timer  -->
        <!-- Do process reset after 1 sec -->
        <restart_min>1</restart_min>
        <!-- If restart fails, then boot after +5 sec of previous wait time -->
        <restart_step>10</restart_step>
        <!-- If still not started, then max boot time is a 30 sec. -->
        <restart_max>30</restart_max>
        <!--  <sanity> timer, end -->

        <!-- Time after attach when program will start do sanity & respawn checks,
        starts counting after configuration load -->
        <restart_to_check>20</restart_to_check>
        <!-- Send full service table every 5 seconds -->
        <brrefresh>5</brrefresh>
    </appconfig>
    <defaults>
        <min>1</min>
        <max>1</max>
        <autokill>1</autokill>
        <!-- Do not need respawning! -->
        <respawn>1</respawn>
        <!-- The maximum time while process can hang in 'starting' state i.e.
        have not completed initialisation, sec -->
        <start_max>20</start_max>
        <!--
        Ping server in every X sanity units
        -->
        <pingtime>9</pingtime>
        <!--
        Max number of sanity units in which server must respond.
        The granularity is sanity time.
        -->
        <ping_max>40</ping_max>
        <!--
        Max time to wait until process should exit on shutdown
        -->
        <end_max>30</end_max>
        <!-- Interval, in seconds, by which signal sequence -2, -15, -9, -9.... will be sent
        to process until it have been terminated. -->
        <killtime>20</killtime>
    </defaults>
    <servers>
    " +("n"==::prov.dom2?
@"        <server name=""atmi.sv"+::prov.testid+@""">
            <min>1</min>
            <max>1</max>
            <srvid>10</srvid>
            <sysopt>-e ${TESTDIR}/atmisv-dom1.log -r</sysopt>
        </server>
         ":""
        )+ 
@"        <server name=""tpbridge"">
            <max>1</max>
            <srvid>101</srvid>
            <sysopt>-e ${TESTDIR}/tpbridge-dom1.log -r</sysopt>
            <appopt>-f -n2 -r -i 127.0.0.1 -p 20003 -tA -z30 -P0</appopt>
        </server>
    </servers>
</endurox>

"))
        {
            return false;
        }
        
//
// Domain 2 XML configuration
//
        if ("y"==::prov.dom2 && !::prov.writeFile(::prov.dom2_ndrxconf, 

@"<?xml version=""1.0"" ?>
<endurox>
    <appconfig>
        <!-- ALL BELLOW ONES USES <sanity> periodical timer  -->
        <!-- Sanity check time, sec -->
        <sanity>1</sanity>
        <!-- If process have been state changed to other than dead, exit or not running
        but PID of program does not exists in system, then send internel message, then 
        program have been stopped.
        In Seconds.
        -->
        <checkpm>5</checkpm>
        <!--  <sanity> timer, end -->

        <!-- ALL BELLOW ONES USES <respawn> periodical timer  -->
        <!-- Do process reset after 1 sec -->
        <restart_min>1</restart_min>
        <!-- If restart fails, then boot after +5 sec of previous wait time -->
        <restart_step>10</restart_step>
        <!-- If still not started, then max boot time is a 30 sec. -->
        <restart_max>30</restart_max>
        <!--  <sanity> timer, end -->

        <!-- Time after attach when program will start do sanity & respawn checks,
        starts counting after configuration load -->
        <restart_to_check>20</restart_to_check>
        <!-- Send full service table every 5 seconds -->
        <brrefresh>5</brrefresh>
    </appconfig>
    <defaults>
        <min>1</min>
        <max>1</max>
        <autokill>1</autokill>
        <!-- Do not need respawning! -->
        <respawn>1</respawn>
        <!-- The maximum time while process can hang in 'starting' state i.e.
        have not completed initialisation, sec -->
        <start_max>20</start_max>
        <!--
        Ping server in every X sanity checks
        -->
        <pingtime>9</pingtime>
        <!--
        Max number of sanity units in which server must respond.
        -->
        <ping_max>40</ping_max>
        <!--
        Max time to wait until process should exit on shutdown
        -->
        <end_max>30</end_max>
        <!-- Interval, in seconds, by which signal sequence -2, -15, -9, -9.... will be sent
        to process until it have been terminated. -->
        <killtime>20</killtime>
    </defaults>
    <servers>
        <server name=""atmi.sv"+::prov.testid+@""">
            <min>1</min>
            <max>1</max>
            <srvid>10</srvid>
            <sysopt>-e ${TESTDIR}/atmisv-dom2.log -r</sysopt>
        </server>
        <server name=""tpbridge"">
            <max>1</max>
            <srvid>101</srvid>
            <sysopt>-e /tmp/bridge-dom2.log -r</sysopt>
            <appopt>-f -n1 -r -i 0.0.0.0 -p 20003 -tP -z30 -P0</appopt>
        </server>
    </servers>
</endurox>


"))
        {
            return false;
        }
//
// Debug dom1 configuration
//
        if ("y"==::prov.dom1 && !::prov.writeFile(::prov.dom1_debug, 

@"* ndrx=5 ubf=1 lines=1 bufsz=1000 file=${TESTDIR}/ndrx-dom1.log
xadmin file=${TESTDIR}/xadmin-dom1.log
ndrxd file=${TESTDIR}/ndrxd-dom1.log
atmiclt"+::prov.testid+@" file=${TESTDIR}/atmiclt-dom1.log
"+("y"==::prov.dom1 && "n"==::prov.dom2?@"
atmi.sv"+::prov.testid+@" file=${TESTDIR}/atmisv-dom1.log
":"")+@"
tpbridge file=${TESTDIR}/tpbridge-dom1.log threaded=y
"))
        {
            return false;
        }
        
//
// Debug dom2 configuration
//
        if ("y"==::prov.dom2 && !::prov.writeFile(::prov.dom2_debug, 
@"* ndrx=5 ubf=1 lines=1 bufsz=1000 file=${TESTDIR}/ndrx-dom2.log
xadmin file=${TESTDIR}/xadmin-dom2.log
ndrxd file=${TESTDIR}/ndrxd-dom2.log
atmi.sv"+::prov.testid+@" file=${TESTDIR}/atmisv-dom2.log
tpbridge file=${TESTDIR}/tpbridge-dom2.log threaded=y
"))
        {
            return false;
        }
        
//
// Run config for domains..
//
        if ("y"==::prov.dom1 && !::prov.writeFile(::prov.run, 

@"#!/bin/bash
##
## @brief "+::prov.descr+@" - test launcher
##
## @file run.sh
##
## -----------------------------------------------------------------------------
## Enduro/X Middleware Platform for Distributed Transaction Processing
## Copyright (C) 2009-2016, ATR Baltic, Ltd. All Rights Reserved.
## Copyright (C) 2017-2018, Mavimax, Ltd. All Rights Reserved.
## This software is released under one of the following licenses:
## AGPL or Mavimax's license for commercial use.
## -----------------------------------------------------------------------------
## AGPL license:
## 
## This program is free software; you can redistribute it and/or modify it under
## the terms of the GNU Affero General Public License, version 3 as published
## by the Free Software Foundation;
##
## This program is distributed in the hope that it will be useful, but WITHOUT ANY
## WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A
## PARTICULAR PURPOSE. See the GNU Affero General Public License, version 3
## for more details.
##
## You should have received a copy of the GNU Affero General Public License along 
## with this program; if not, write to the Free Software Foundation, Inc., 
## 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
##
## -----------------------------------------------------------------------------
## A commercial use license is available from Mavimax, Ltd
## contact@mavimax.com
## -----------------------------------------------------------------------------
##

export TESTNAME="""+::prov.testname+@"""

PWD=`pwd`
if [ `echo $PWD | grep $TESTNAME ` ]; then
    # Do nothing 
    echo > /dev/null
else
    # started from parent folder
    pushd .
    echo ""Doing cd""
    cd $TESTNAME
fi;

. ../testenv.sh

export TESTDIR=""$NDRX_APPHOME/atmitest/$TESTNAME""
export PATH=$PATH:$TESTDIR

export NDRX_TOUT=10

#
# Domain 1 - here client will live
#
set_dom1() {
    echo ""Setting domain 1""
    . ../dom1.sh
    export NDRX_CONFIG=$TESTDIR/ndrxconfig-dom1.xml
    export NDRX_DMNLOG=$TESTDIR/ndrxd-dom1.log
    export NDRX_LOG=$TESTDIR/ndrx-dom1.log
    export NDRX_DEBUG_CONF=$TESTDIR/debug-dom1.conf
}

"+("y"==::prov.dom2?@"
#
# Domain 2 - here server will live
#
set_dom2() {
    echo ""Setting domain 2""
    . ../dom2.sh    
    export NDRX_CONFIG=$TESTDIR/ndrxconfig-dom2.xml
    export NDRX_DMNLOG=$TESTDIR/ndrxd-dom2.log
    export NDRX_LOG=$TESTDIR/ndrx-dom2.log
    export NDRX_DEBUG_CONF=$TESTDIR/debug-dom2.conf
}":"")+@"

#
# Generic exit function
#
function go_out {
    echo ""Test exiting with: $1""
    
    set_dom1;
    xadmin stop -y
    xadmin down -y

"+("y"==::prov.dom2?@"
    set_dom2;
    xadmin stop -y
    xadmin down -y":"")+@"

    # If some alive stuff left...
    xadmin killall atmiclt"+::prov.testid+@"

    popd 2>/dev/null
    exit $1
}

rm *dom*.log
# Any bridges that are live must be killed!
xadmin killall tpbridge

set_dom1;
xadmin down -y
xadmin start -y || go_out 1

"+("y"==::prov.dom2?@"
set_dom2;
xadmin down -y
xadmin start -y || go_out 2
":"")+@"

# Have some wait for ndrxd goes in service - wait for connection establishment.
sleep 30
RET=0

xadmin psc
xadmin ppm
echo ""Running off client""

set_dom1;
(./atmiclt"+::prov.testid+@" 2>&1) > ./atmiclt-dom1.log
#(valgrind --leak-check=full --log-file=""v.out"" -v ./atmiclt"+::prov.testid+@" 2>&1) > ./atmiclt-dom1.log

RET=$?

if [[ ""X$RET"" != ""X0"" ]]; then
    go_out $RET
fi

# Catch is there is test error!!!
if [ ""X`grep TESTERROR *.log`"" != ""X"" ]; then
        echo ""Test error detected!""
        RET=-2
fi


go_out $RET


# vim: set ts=4 sw=4 et smartindent:

"))
        {
            return false;
        }
//
// Give execute permissions for runner
//
        if (!::prov.setExec(::prov.run))
        {
                return false;
        }

	}
	else
	{
		return false;
	}

	return true;
}

if (::install())
{
	print("local test case gen succeed!\n");
	
	return 0;
}
else
{
	print("local test case gen failed!\n");
	return -1;
}
