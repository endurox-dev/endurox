#!/usr/bin/pscript

userlog("Provision script started");

print("\n");
print("    ______          __                    ___  __\n");
print("   / ____/___  ____/ /_  ___________    _/_/ |/ /\n");
print("  / __/ / __ \\/ __  / / / / ___/ __ \\ _/_/ |   / \n");
print(" / /___/ / / / /_/ / /_/ / /  / /_/ //_/  /   |  \n");
print("/_____/_/ /_/\\__,_/\\__,_/_/   \\____/_/   /_/|_|  \n");
print("\n");
print("                     Provision\n");
print("\n");


//Include wizard base.
compilestring(getwizardbase())();

//Provision class
class Provision extends WizardBase {



	constructor()
	{
		base.constructor();

		/* Override the default q path for BSD.. */
		if ("FREEBSD"==getosname())
                {
			qpath = "/mnt/mqueue";
                }
	}
	
	//Queue prefix
	//TODO: Detect by OS + compiled q mode.
	</ order=0, name = "Queue device path", type = "string", min=1, max=512 /> 
	qpath = "/dev/mqueue";
	
	//Get some random number...
	</ order=1, name = "Cluster node id", type = "number", min=1, max=32 /> 
	nodeid = "1";
	
	</ order=2, name = "System code (prefix/setfile name, etc)", type = "string",
                min=1, max=8, regex="^[A-Za-z0-9]+"/> 
	qprefix = "test1";
	
	//</ order=3, name = "Setup sample XA config", type = "yn"/> 
	//sampleXA = "n";
	
	//we need: Qspace, Qdata, tmlogs folder
	
	</ order=3, name = "System wide tpcall() timeout, seconds", type = "number"/> 
	timeout = "90";
	
	</ order=4, name = "Application home", type = "string", min=1, max=512, regex="^/.*" /> 
	appHome = "";
	
	//If starts with '/' - then assume that it is full path...
	</ order=6, name = "Executables/binaries sub-folder of Apphome", type = "path"/> 
	binDir = "bin";
	
	</ order=8, name = "Configuration sub-folder of Apphome", type = "path"/> 
	confDir = "conf";
	
	</ order=9, name = "Log sub-folder of Apphome", type = "path"/> 
	logDir = "log";
	
	</ order=10, name = "Unified Buffer Format (UBF) field defs sub-folder of Apphome", 
		type = "path"/> 
	ubfDir = "ubftab";
	
	</ order=11, name = "Temp sub-dir (used for pid file)", type = "path"/> 
	tempDir = "tmp";
	
	</ order=12, name = "Configure persistent queue", type = "yn"/> 
	installQ = "y";
	
	</ order=13, name = "Transaction Manager Logs sub-folder of Apphome", 
		type = "path" depend="(::prov.installQ==\"y\")" /> 
	tmDir = "tmlogs";
	
	</ order=14, name = "Queue data sub-folder of Apphone", 
		type = "path" depend="(::prov.installQ==\"y\")" /> 
	qdata = "qdata";
	
	</ order=15, name = "Persistent queue space namme", min=1, max=30,
		type = "string" depend="(::prov.installQ==\"y\")" regex="^[A-Za-z0-9]+" /> 
	qSpace = "SAMPLESPACE";
	
	</ order=16, name = "Sample persistent queue name", min=1, max=30,
		type = "string" depend="(::prov.installQ==\"y\")" regex="^[A-Za-z0-9]+" /> 
	qName = "TESTQ1";
	
	</ order=17, name = "Target service for automatic queue for sample Q", min=1, max=30,
		type = "string" depend="(::prov.installQ==\"y\")"/> 
	qSvc = "TESTSVC1";
	
	</ order=18, name = "Install event server", type = "yn"/> 
	eventSv = "y";
	
	</ order=19, name = "Configure Client Process Monitor Server", type = "yn"/> 
	cpmSv = "y";
	
	</ order=20, name = "Install Configuration server", type = "yn"/> 
	configSv = "y";
	
	</ order=21, name = "Install bridge connection", type = "yn"/> 
	bridge = "y";
	
	</ order=22, name = "Bridge -> Role: Active(a) or passive(p)?", type = "string", 
                regex="^[apAP]?", depend="::prov.bridge==\"y\""/> 
	bridgeRole = "a";

	</ order=23, name = "Bridge -> IP: Listen address", type = "regex", 
                regex="^(?:[0-9]{1,3}\\.){3}[0-9]{1,3}$", 
                depend="(::prov.bridge==\"y\" && ::prov.bridgeRole.toupper()==\"P\")"/> 
	ipl = "0.0.0.0";
	
	</ order=24, name = "Bridge -> IP: Connect to", type="regex", regex="^(?:[0-9]{1,3}\\.){3}[0-9]{1,3}$", 
                depend="(::prov.bridge==\"y\" && ::prov.bridgeRole.toupper()==\"A\")"/> 
	ipc = "127.0.0.1";
	
	</ order=25, name = "Bridge -> IP: Port number", type="number", min=0, max=65000, 
                depend="(::prov.bridge==\"y\")" /> 
	port = "21003";
	
	</ order=26, name = "Other cluster node id", type="number", min=1, max=32, 
                depend="(::prov.bridge==\"y\")" /> 
	otherNodeId = "2";

	</ order=27, name = "IPC Key used for System V semaphores", 
			type="string", regex="[0-9a-fA-F]+" min=1, max=8 /> 
	ipckey = "44000";
	
	</ order=28, name = "Load balance over cluster", 
			type="number", min=0, max=100 /> 
	ldbal = "0";
	
	</ order=29, name = "Logging: ATMI sub-system log level 5 - highest (debug), 0 - minimum (off)", 
			type="number", min=0, max=5 /> 
	ndrxlev = "5";
	
	
	</ order=30, name = "Logging: UBF sub-system log level 5 - highest (debug), 0 - minimum (off)", 
			type="number", min=0, max=5 /> 
	ubflev = "1";
	
	</ order=31, name = "Logging: /user sub-system log level 5 - highest (debug), 0 - minimum (off)", 
			type="number", min=0, max=5 /> 
	tplev = "5";
	
	////////////////////////////////////////////////////////////////////////
	//User server blocks
	////////////////////////////////////////////////////////////////////////
	</ order=32, name = "Configure User server #1", 
			type="yn"/> 
	usv1 = "n";
	
	//Binary name
	</ order=33, name = "User server #1: binary name", type="string", min=1,
		depend="(::prov.usv1==\"y\")" /> 
	usv1_name = "";
	
	</ order=34, name = "User server #1: min", type="number", min=0,
		depend="(::prov.usv1==\"y\")" /> 
	usv1_min = "1";
	
	</ order=35, name = "User server #1: max", type="number", min=0,
		depend="(::prov.usv1==\"y\")" /> 
	usv1_max = "1";
	
	</ order=36, name = "User server #1: srvid", type="number", min=200,
		depend="(::prov.usv1==\"y\")" /> 
	usv1_srvid = "2000";
	
	</ order=37, name = "User server #1: cctag", type="string",
		depend="(::prov.usv1==\"y\")" /> 
	usv1_cctag = "";
	
	</ order=38, name = "User server #1: sysopt", type="string", min=1,
		depend="(::prov.usv1==\"y\")" /> 
	usv1_sysopt = "";
	
	</ order=39, name = "User server #1: appopt", type="string",
		depend="(::prov.usv1==\"y\")" /> 
	usv1_appopt = "";
	
	
	////////////////////////////////////////////////////////////////////////
	//User client blocks
	////////////////////////////////////////////////////////////////////////
	</ order=50, name = "Configure User client #1", 
			type="yn"/> 
	ucl1 = "n";
	</ order=51, name = "User client #1: cmdline", type="string", min=1,
		depend="(::prov.ucl1==\"y\")" /> 
	usv1_cmdline = "";
	
	</ order=52, name = "User client #1: tag", type="string", min=1,
		depend="(::prov.ucl1==\"y\")" /> 
	usv1_tag = "";
	
	</ order=53, name = "User client #1: subsect", type="string",
		depend="(::prov.ucl1==\"y\")" /> 
	usv1_subsect = "";
	
	</ order=54, name = "User client #1: logfile", type="string", min=1,
		depend="(::prov.ucl1==\"y\")" /> 
	usv1_log = "";
	////////////////////////////////////////////////////////////////////////
	////////////////////////////////////////////////////////////////////////
	
	</ order=55, name = "Additional UBFTAB files (comma separated), can be empty", type="string", min=0 /> 
	addubf = "";

	</ order=56, name = "Max IPC message size", 
			type="number", min=1024 /> 
	msgsizemax="56000";

	</ order=57, name = "Max IPC messages in queue", 
			type="number", min=1 /> 
	msgmax = "100";

	////////////////////////////////////////////////////////////////////////
        //Views
	////////////////////////////////////////////////////////////////////////

        </ order=70, name = "Configure views", type = "yn"/> 
	viewInstall = "n";

        </ order=71, name = "View definitions sub-folder of Apphome", 
                        type = "path", depend="(::prov.viewInstall==\"y\")"/> 
        viewDir = "views";

        </ order=72, name = "View files to active", type="string", min=1,
                        depend="(::prov.viewInstall==\"y\")"/> 
        viewFiles = "";

        ////////////////////////////////////////////////////////////////////////
        // Shared libraries and etc paths..
	////////////////////////////////////////////////////////////////////////
        </ order=80, name = "Additional shared libraries path", type="string", min=0 /> 
        shLibs = "";
	
	//Install handler
	install = null;
	
	mk_mq_dev = false;
	

	//Get the output files to write to
	//So we will need following:
	//1. ndrxconfig.xml
	//2. app.ini
	//3. setqprefix
	
	ndrxconfig = "";
	appini = "";
	setfile = "";
	
	function getOutputFiles()
	{
		ndrxconfig = appHome+"/"+confDir+"/ndrxconfig.xml";
		appini = appHome+"/"+confDir+"/app.ini";
		setfile = appHome+"/"+confDir+"/set"+qprefix;
		
		print("ndrxconfig: ["+ndrxconfig+"]\n");
		userlog("ndrxconfig: ["+ndrxconfig+"]");
		
		print("appini: ["+appini+"]\n");
		userlog("appini: ["+appini+"]");
		
		print("setfile: ["+setfile+"]\n");
		userlog("setfile: ["+setfile+"]");
	}
	
	
	//Build the ndrxconfig value
	ndrxconfigXmlVal = "";
	function buildNdrxconfig()
	{
	
		ndrxconfigXmlVal = @"<?xml version=""1.0"" ?>
<endurox>
	<!--
		*** For more info see ndrxconfig.xml(5) man page. ***
	-->
	<appconfig>
		<!-- 
			ALL BELLOW ONES USES <sanity> periodical timer
			Sanity check time, sec
		-->
		<sanity>1</sanity>
		
		<!--
			Seconds in which we should send service refresh to other node.
		-->
		<brrefresh>5</brrefresh>
		
		<!-- 
			Do process reset after 1 sec 
		-->
		<restart_min>1</restart_min>
		
		<!-- 
			If restart fails, then boot after +5 sec of previous wait time
		-->
		<restart_step>1</restart_step>
		
		<!-- 
			If still not started, then max boot time is a 30 sec. 
		-->
		<restart_max>5</restart_max>
		
		<!--  
			<sanity> timer, usage end
		-->
		
		<!-- 
			Time (seconds) after attach when program will start do sanity & respawn checks,
			starts counting after configuration load 
		-->
		<restart_to_check>20</restart_to_check>
		
		
		<!-- 
			Setting for pq command, should ndrxd collect service 
			queue stats automatically If set to Y or y, 
			then queue stats are on. Default is off.
		-->
		<gather_pq_stats>Y</gather_pq_stats>

	</appconfig>
	<defaults>

		<min>1</min>
		<max>2</max>
		<!-- 
			Kill the process which have not started in <start_max> time
		-->
		<autokill>1</autokill>
		
		<!-- 
			The maximum time while process can hang in 'starting' state i.e.
			have not completed initialization, sec X <= 0 = disabled  
		-->
		<start_max>10</start_max>
		
		<!--
			Ping server in every X seconds (step is <sanity>).
		-->
		<pingtime>100</pingtime>
		
		<!--
			Max time in seconds in which server must respond.
			The granularity is sanity time.
			X <= 0 = disabled 
		-->
		<ping_max>800</ping_max>
		
		<!--
			Max time to wait until process should exit on shutdown
			X <= 0 = disabled 
		-->
		<end_max>10</end_max>
		
		<!-- 
			Interval, in seconds, by which signal sequence -2, -15, -9, -9.... will be sent
			to process until it have been terminated.
		-->
		<killtime>1</killtime>
		
	</defaults>
	<servers>";
	
		//Install config server
		if (configSv=="y")
		{
		
			ndrxconfigXmlVal=ndrxconfigXmlVal+
		@"
		<server name=""cconfsrv"">
			<min>2</min>
			<max>2</max>
			<srvid>1</srvid>
			<sysopt>-e ${NDRX_APPHOME}/"+logDir+@"/cconfsrv.log -r</sysopt>
		</server>";
		
		}
		
		//Install event server
		if (eventSv=="y")
		{
			ndrxconfigXmlVal=ndrxconfigXmlVal+
		@"
		<server name=""tpevsrv"">
			<min>2</min>
			<max>2</max>
			<srvid>20</srvid>
			<sysopt>-e ${NDRX_APPHOME}/"+logDir+@"/tpevsrv.log -r</sysopt>
		</server>";
		}
		
		
		////////////////////////////////////////////////////////////////
		//Install event server
		//So we need:
		// - TMSRV log folder for 
		// - Data folder
		// - Q space name
		// We need to make a rm1 folder!!!
		////////////////////////////////////////////////////////////////
		if (installQ=="y")
		{
			ndrxconfigXmlVal=ndrxconfigXmlVal+
		@"
		<server name=""tmsrv"">
			<min>3</min>
			<max>3</max>
			<srvid>40</srvid>
			<cctag>RM1TMQ</cctag>
			<sysopt>-e ${NDRX_APPHOME}/"+logDir+@"/tmsrv-rm1.log -r -- -t1 -l${NDRX_APPHOME}/"+tmDir+@"/rm1</sysopt>
		</server>
		<server name=""tmqueue"">
			<min>1</min>
			<max>1</max>
			<srvid>60</srvid>
			<cctag>RM1TMQ</cctag>
			<sysopt>-e ${NDRX_APPHOME}/"+logDir+@"/tmqueue-rm1.log -r -- -m "+qSpace+@" -s1</sysopt>
		</server>";
		}
		
		//Install XA driver for Q
		
		//Cluster bridge connection
		if (bridge=="y")
		{
			local ip = ipl;
			
			if (prov.bridgeRole=="A" || prov.bridgeRole=="a")
			{
				ip = ipc;
			}
			
			ndrxconfigXmlVal=ndrxconfigXmlVal+
		@"
		<server name=""tpbridge"">
			<min>1</min>
			<max>1</max>
			<srvid>150</srvid>
			<sysopt>-e ${NDRX_APPHOME}/"+logDir+@"/tpbridge_"+otherNodeId+@".log -r</sysopt>
			<appopt>-f -n"+otherNodeId+@" -r -i "+ip+" -p "+port+" -t"+bridgeRole.toupper()+@" -z30</appopt>
		</server>";
		}
		
		//Install user server 1
		if (usv1=="y")
		{
			local _cctag="";
			if (usv1_cctag!="")
			{
				_cctag=@"
			<cctag>"+usv1_cctag+@"</cctag>"
			}
			
			local _appopt = "";
			if (usv1_appopt!="")
			{
				_appopt=@"
			<appopt>"+usv1_cctag+@"</appopt>"
			}
			
			ndrxconfigXmlVal=ndrxconfigXmlVal+
		@"
		<server name="""+usv1_name+@""">"+_cctag+@"
			<min>"+usv1_min+@"</min>
			<max>"+usv1_max+@"</max>
			<srvid>"+usv1_srvid+@"</srvid>
			<sysopt>"+usv1_sysopt+@"</sysopt>"+_appopt+@"
		</server>";
		}
		
		//Install CPM srv
		if (cpmSv=="y")
		{
			ndrxconfigXmlVal=ndrxconfigXmlVal+
		@"
		<server name=""cpmsrv"">
			<min>1</min>
			<max>1</max>
			<srvid>9999</srvid>
			<sysopt>-e ${NDRX_APPHOME}/"+logDir+@"/cpmsrv.log -r -- -k3 -i1</sysopt>
		</server>";
		}
		ndrxconfigXmlVal=ndrxconfigXmlVal+@"
	</servers>";
		
		//Add Sample client process...
		if (cpmSv=="y")
		{
			local _ucl1 = "";
			
			if (ucl1=="y")
			{
				local _subsect1="";
				
				if (_subsect1=="")
				{
					_subsect1=@"subsect="""+usv1_subsect+@""" ";
				}
		_ucl1=@"
		<client cmdline="""+usv1_cmdline+@""">
			<exec tag="""+usv1_tag+@""" autostart=""Y"" "+_subsect1+@"log="""+usv1_log+@"""/>
		</client>";
		
			}
		ndrxconfigXmlVal=ndrxconfigXmlVal+
	@"
	<!-- 
		Client section 
	-->
	<clients>
		<!--
			Test parameter passing to process 
			- To list clients:$ xadmin pc
			- To stop client: $ xadmin sc -t TAG1 -s SUBSECTION1
			- To boot client: $ xadmin bc -t TAG1 -s SUBSECTION1
		-->
		<client cmdline=""your_test_binary.sh -t ${NDRX_CLTTAG} -s ${NDRX_CLTSUBSECT}"">
			<exec tag=""TAG1"" subsect=""SUBSECTION1"" autostart=""Y"" log=""${NDRX_APPHOME}/"+logDir+@"/testbin-1.log""/>
			<exec tag=""TAG2"" subsect=""SUBSECTION2"" autostart=""Y"" log=""${NDRX_APPHOME}/"+logDir+@"/testbin-3.log""/>
		</client>
		<client cmdline=""your_test_binary2.sh -t ${NDRX_CLTTAG}"">
			<exec tag=""TAG3"" autostart=""Y"" log=""${NDRX_APPHOME}/"+logDir+@"/testbin2-1.log""/>
		</client>"+_ucl1+@"
	</clients>";
		}
		
		ndrxconfigXmlVal=ndrxconfigXmlVal+@"
</endurox>
";
		
	}
	
	//Build the app.ini value
	appiniVal = "";
	function buildAppini()
	{
	
		appiniVal=appiniVal+@"[@global]
NDRX_CLUSTERISED=1
NDRX_CMDWAIT=1
NDRX_CONFIG=${NDRX_APPHOME}/"+confDir+@"/ndrxconfig.xml
NDRX_DMNLOG=${NDRX_APPHOME}/"+logDir+@"/ndrxd.log
NDRX_DPID=${NDRX_APPHOME}/"+tempDir+@"/ndrxd.pid
NDRX_DQMAX=100
NDRX_IPCKEY="+ipckey+@"
NDRX_LDBAL="+ldbal+@"
NDRX_LEV=5
NDRX_LOG=${NDRX_APPHOME}/"+logDir+@"/xadmin.log
NDRX_MSGMAX="+msgmax+@"
NDRX_MSGSIZEMAX="+msgsizemax+@"
NDRX_NODEID="+nodeid+@"
NDRX_QPATH="+qpath+@"
NDRX_QPREFIX=/"+qprefix+@"
NDRX_RNDK=0myWI5nu
NDRX_SRVMAX=10000
NDRX_SVCMAX=20000
NDRX_TOUT="+timeout+@"
NDRX_UBFMAXFLDS=16000
NDRX_LIBEXT="+shared_lib_pfx+@"
NDRX_ULOG=${NDRX_APPHOME}/"+logDir+@"
FIELDTBLS=Exfields"+(addubf!=""?(","+addubf):"")+@"
FLDTBLDIR=${NDRX_APPHOME}/"+ubfDir+
(::prov.viewInstall=="y"?@"
VIEWDIR=${NDRX_APPHOME}/"+viewDir+@"
VIEWFILES="+viewFiles:"")+
@"
";

		//Configure queue XA driver
		if (installQ=="y")
		{
			appiniVal=appiniVal+@"
; Environment for Transactional Queue
[@global/RM1TMQ]
NDRX_XA_RES_ID=1
NDRX_XA_OPEN_STR=${NDRX_APPHOME}/"+qdata+@"
NDRX_XA_CLOSE_STR=${NDRX_APPHOME}/"+qdata+@"
NDRX_XA_DRIVERLIB=libndrxxaqdisks."+shared_lib_pfx+@"
; dylib needed for osx
NDRX_XA_RMLIB=libndrxxaqdisk."+shared_lib_pfx+@"
NDRX_XA_LAZY_INIT=0
";
		}


appiniVal=appiniVal+@"
[@debug]
; * - goes for all binaries not listed bellow
*= ndrx="+ndrxlev+@" ubf="+ubflev+@" tp="+tplev+@" file=
xadmin= ndrx="+ndrxlev+@" ubf="+ubflev+@" tp="+tplev+@" file=${NDRX_APPHOME}/"+logDir+@"/xadmin.log
ndrxd= ndrx="+ndrxlev+@" ubf="+ubflev+@" tp="+tplev+@" file=${NDRX_APPHOME}/"+logDir+@"/ndrxd.log
";



		if (installQ=="y")
		{
	
			appiniVal=appiniVal+@"
; Queue definitions goes here, see man q.conf(5) for syntax
[@queue]
; Default manual queue (reserved name '@'), unknown queues are created based on this template:
@=svcnm=-,autoq=n,waitinit=0,waitretry=0,waitretryinc=0,waitretrymax=0,memonly=n,mode=fifo

[@queue/RM1TMQ]
; Sample queue (this one is automatic, sends messages to target service)
"+qName+@"=svcnm="+qSvc+@",autoq=y,tries=3,waitinit=1,waitretry=1,waitretryinc=2,waitretrymax=5,memonly=n,mode=fifo
";


		}
	
		//print(appiniVal);
	}
	
	//
	// Generate set file
	// TODO: Might want to add cdpath too...
	// 
	setfileVal = "";
	function buildSetfile()
	{
                local shlibstr = "";
                if (::prov.shLibs!="")
                {
                    switch (getosname())
                    {
                        case "AIX":
                            shlibstr = "export LIBPATH=$LIBPATH:"+::prov.shLibs;
                        break;
                        case "DARWIN":
                            shlibstr = "export DYLD_LIBRARY_PATH=$DYLD_LIBRARY_PATH:"+::prov.shLibs;
                        break;
                        default:
                            shlibstr = "export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:"+::prov.shLibs;
                        break;
                    }
                }
		setfileVal=setfileVal+@"#/bin/bash
#
# @(#) Load this script in environment
#
export NDRX_APPHOME="+appHome+@"
export NDRX_CCONFIG=$NDRX_APPHOME/"+confDir+@"
export PATH=$PATH:$NDRX_APPHOME/"+binDir+@"
export CDPATH=$CDPATH:.:$NDRX_APPHOME
"+shlibstr+"\n";

		//create posix queue folder, if needed.
		if (mk_mq_dev)
		{
setfileVal=setfileVal+@"
if [ ! -d """+qpath+@""" ]; then
	mkdir """+qpath+@"""
fi
";
		}

		//print(setfileVal);
	}
	
	//Create folders..
	function createFolders()
	{
		userlog("About to create folders");
		try
		{
			if (mk_mq_dev)
			{
				userlog(format("Creating: [%s]", qpath));
				mkdir (qpath);
			}
			
			userlog(format("Creating: [%s]", appHome));
			mkdir (appHome);
			
			userlog(format("Creating: [%s]", appHome+"/"+binDir));
			mkdir (appHome+"/"+binDir);
			
			userlog(format("Creating: [%s]", appHome+"/"+confDir));
			mkdir (appHome+"/"+confDir);
			
			userlog(format("Creating: [%s]", appHome+"/"+logDir));
			mkdir (appHome+"/"+logDir);
			
			userlog(format("Creating: [%s]", appHome+"/"+ubfDir));
			mkdir (appHome+"/"+ubfDir);
			
			userlog(format("Creating: [%s]", appHome+"/"+tempDir));
			mkdir (appHome+"/"+tempDir);
			
			if (installQ=="y")
			{
				userlog(format("Creating: [%s]", appHome+"/"+tmDir));
				mkdir (appHome+"/"+tmDir);
				
				userlog(format("Creating: [%s]", appHome+"/"+tmDir));
				mkdir (appHome+"/"+tmDir);
				
				userlog(format("Creating: [%s]", appHome+"/"+tmDir+"/rm1"));
				mkdir (appHome+"/"+tmDir+"/rm1");
				
				userlog(format("Creating: [%s]", appHome+"/"+qdata));
				mkdir (appHome+"/"+qdata);
			}

                        if (viewInstall=="y")
			{
				userlog(format("Creating: [%s]", appHome+"/"+viewDir));
				mkdir (appHome+"/"+viewDir);
                        }
		}
		catch (ex)
		{
			userlog(format("createFolders failed: %s", ex));
			print(format("createFolders failed: %s\n", ex));
			return false;
		}
		
		return true;
	}
}

//Run the mater installer
function install() 
{
    local root = getroottable();

    //Create a provision object
    root["prov"] <- Provision();

    print("Compiled system type....: " + ::prov.osType + "\n");
    print("\n");

    if (!::prov.isDefaulted)
    {
        ::prov.runInteractive();
    }

    if (::prov.validatAndPrintConfig())
    {
            ::prov.getOutputFiles();
            ::prov.buildNdrxconfig();
            ::prov.buildAppini();
            ::prov.buildSetfile();

            if (!::prov.createFolders())
            {
                    return false;
            }

            if (!::prov.writeFile(::prov.ndrxconfig, ::prov.ndrxconfigXmlVal))
            {
                    return false;
            }

            if (!::prov.writeFile(::prov.appini, ::prov.appiniVal))
            {
                    return false;
            }

            if (!::prov.writeFile(::prov.setfile, ::prov.setfileVal))
            {
                    return false;
            }

            if (!::prov.setExec(::prov.setfile))
            {
                    return false;
            }

            /* write exfields, if have the function in root table */
            if (root.rawin("getExfields"))
            {
                if (!::prov.writeFile(::prov.appHome+"/"+::prov.ubfDir+"/Exfields", ::getExfields()))
                {
                        return false;
                }
            }
    }
    else
    {
        return false;
    }

    return true;
}

if (::install())
{
	print("\n");
	print("\n");

	print("To start your system, run following commands:\n");
	print("$ cd "+::prov.appHome+"/"+::prov.confDir+"\n");
	print("$ source set"+::prov.qprefix+"\n");
	print("$ xadmin start -y\n");

	print("\n");
	print("\n");

	userlog("Provision succeed!");
	print("Provision succeed!\n");


	return 0;
}
else
{
	userlog("Provision failed!");
	print("Provision failed!\n");
	return -1;
}
