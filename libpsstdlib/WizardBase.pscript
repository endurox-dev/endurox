#!/usr/bin/pscript

//Wizard base processor class
class WizardBase {


	elemOrder = null;
	
	isDefaulted = false;
	
	//Calculated min/max order
	minOrder = 99;
	
	maxOrder = -1;
	
	new_val = "";
	
	shared_lib_pfx = "so";

	//Queue type...
	qType = "";

	//Should come from packages
	osType = "";
	
	//Application home directory (i.e. current dir)
	appHome = ".";

	//Queue path
	qpath = "";

	//??
	mk_mq_dev = false;

	//This is constructor, we shall get some infos from Enduro/X base build
	constructor() {
		osType = getosname();
		//qType = "posixq";
		
		//Set app home to pwd
		appHome = getcwd();
		
		elemOrder = this.getSortedParamArray();
		
		//Set shared lib path...
                if (getpoller()=="emq")
		{
			qpath="/tmp/mq";
			mk_mq_dev = true;
		}
		else if (osType=="DARWIN")
		{
			shared_lib_pfx="dylib";
			qpath="/tmp/mq";
			mk_mq_dev = true;
		}
		else if (osType=="CYGWIN")
		{
			shared_lib_pfx="dll";
		}
		else if (osType=="SUNOS")
		{
			//If we have a Solaris, then it is tmp...
			qpath = "/tmp";
		}
		else if (osType=="AIX")
		{
                        qpath="/tmp/mq";
			mk_mq_dev = true;
		}
		
		/* Load the overrides from cli */
		local root = getroottable();
		if (root.rawin("args"))
		{
			foreach(member,val in this.getclass())
			{
				
				if (root.args.rawin(member))
				{
					/* set the value from member... */
					this[member] = root.args[member];
				}
			}
		}
	}
	
	//Print the value entry line
	function printEntryLine(pfx, member) {
	
		local attr = this.getclass().getattributes(member);
		::print(format("%2s:%s %-12s :%s [%s]: ", ""+attr["order"], pfx,
				member, attr["name"], this[member]));
				
		::userlog(format("%2s:%s %-12s :%s [%s]: ", ""+attr["order"], pfx,
				member, attr["name"], this[member]));
	}
	
	//Validate the value of field
	//@param member	Class member to attributes from
	//@param value	Value to test validity for this field
	function validateValue(member, value)
	{
	
		local attr = this.getclass().getattributes(member);
		local empty = false;
		if (attr["type"]=="number")
		{
			try
			{
				if (attr.rawin("min"))
				{
					if ((value.tointeger()) < (attr["min"]))
					{
						print("Invalid value: Min length "+
							attr["min"]+"\n");
						return 0;
					}
				}
				
				if (attr.rawin("max"))
				{
					if ((value.tointeger()) > (attr["max"]))
					{
						print("Invalid value: Max length "+
							attr["max"]+"\n");
						return 0;
					}
				}
				
				local test = value.tointeger();
			}
			catch (e)
			{
				print("Invalid number!\n");
				return 0;
			}
		}
		else
		{
			if (attr.rawin("min"))
			{
			
				if (value.len() < attr["min"])
				{
					print("Invalid value: Min length "+attr["min"]+"\n");
					return 0;
				}
				
				if (0==attr["min"])
				{
					empty=true;
				}
			}
			
			if (attr.rawin("max"))
			{
				if (value.len() > (attr["max"]+0))
				{
					print("Invalid value: Max length "+attr["max"]+"\n");
					return 0;
				}
			}
		}
		
		//Check for regex
		if (!empty && attr.rawin("regex"))
		{
		
			local ex = regexp(attr["regex"]);
			
			if (!ex.match(value))
			{
				print("Invalid value: Does not match expression: ["+
					attr["regex"]+"]\n");
				return 0;
			}
		}
		
		if (attr["type"]=="yn")
		{
		
			local ex = regexp("^[ynYN]$");
			
			if (!ex.match(value))
			{
				print("Error: Y/N?\n");
				return 0;
			}
			
			value = value.tolower();
		}
		
		
		//Temporary storage to return the value
		new_val = value;
		
		return 1;
	}
	
	//Returns elements in sorted order
	function getSortedParamArray()
	{
		local elemOrder = [];
		local clazz = this.getclass();
		//prov.install.CheckLimits();

		//Sort the fields
		foreach(member,val in this.getclass())
		{
			local attr = this.getclass().getattributes(member);
			
			if (null!=attr)
			{	
				if (attr["order"]<minOrder)
				{
					minOrder = attr["order"];
				}
				
				if (attr["order"]>maxOrder)
				{
					maxOrder = attr["order"];
				}

				elemOrder.append(member);
			}
		}

		//Now sort the array
		elemOrder.sort(function(a,b)
		{
			local attrA = clazz.getattributes(a);
			
			local attrB = clazz.getattributes(b);

			return attrA["order"] <=> attrB["order"];
		} );
		
		return elemOrder;
	}
	
	
	//Test is field actual of the object
	//@param member	Field to test for need
	//@return TRUE field actual for user intervetion, FALSE not needed for user.
	function isFieldActual(member)
	{
		local attr;
		
		attr = this.getclass().getattributes(member);
		
		//Check that dependency is ok
		if (attr.rawin("depend"))
		{
			local compiledscript = compilestring("return "+attr["depend"]+";");
			return compiledscript();
		}
		else
		{
			return true;
		}
	}
	
	//Enter the field value from console
	//@param member 	Field to enter.
	function enterField(member)
	{
		local ok = false;
				
		while (!ok)
		{
			this.printEntryLine("", member);

			local new_val  = getline();
			
			if (new_val=="")
			{
				new_val = this[member];
			}
			
			//Validate input...
			if (this.validateValue(member, new_val))
			{
				this[member] = this.new_val;
				ok = true;
			}
		}
	}
	
	//Run the runInteractive configuration
	//@return TRUE OK to provision (accepted), FALSE - not ok
	function runInteractive()
	{
		//Run the wizard...
		//Iterate over the all paramters
		//foreach(member,val in Provision)
		foreach(member in elemOrder)
		{
			if (this.isFieldActual(member))
			{
				enterField(member);
			}
		}

		//OK to provision..
		return true;
	}
	
	
	//Get element name by order
	//@param order	Order number of attributes
	//@return	element name, empty if not found
	function getMemberByOrder(order)
	{
		foreach(member,val in this.getclass())
		{
			local attr = this.getclass().getattributes(member);
			
			if (null!=attr)
			{	
				if (attr["order"] == order.tointeger())
				{
					if (this.isFieldActual(member))
					{
						return member;
					}
					else
					{
						return ""; /* currently not editable... */
					}
						
				}
			}
		}
		
		return "";
	}
	
	
	//Print the actual configuration
	//@return true - config ok, false - config bad
	function printConfig()
	{
		local first = true;
		//If not defauled, run over the fields and ask for values..
		if (!isDefaulted)
		{
			foreach(member in this.elemOrder)
			{
				if (this.isFieldActual(member))
				{
					if (!this.validateValue(member, this[member]))
					{
						
						if (first)
						{
							print("*** New dependency fields needs to be filled! ***\n");
							first = false;
						}
						//Enter the value
						enterField(member);
					}
				}
			}
		}
		
		
		//Run the wizard...
		//Iterate over the all paramters
		//foreach(member,val in Provision)
		foreach(member in this.elemOrder)
		{
			if (this.isFieldActual(member))
			{
				
				if (!this.validateValue(member, this[member]))
				{
					return false;
				}
			
				//Validate input...
				//Print the field value
				this.printEntryLine(" Edit", member);
				print("\n");
			}
		}
		
		return true;
	}
	
	
	//Validate and print config
	function validatAndPrintConfig()
	{
		while (1)
		{
			print("\n");
			print("*** Review & edit configuration ***\n");
			print("\n");
			
			if (!printConfig())
			{
				return false;
			}
					
			//If not defauled, then allow to edit the some entry...
			if (!isDefaulted)
			{
				//Offer entry...
				::print("c: Cancel\n");
				::print("w: Accept, write\n");
				::print("Enter the choice ["+minOrder+"-"+maxOrder+", c, w]: ");
				
				local input = getline();
				
				userlog("User entered: "+input);
				if (input=="c" || input=="C")
				{
					userlog("Terminating...");
					return false;
				}
				else if (input=="w" || input=="W")
				{
					userlog("Accepted");
					return true;
				}
				else if (input!="")
				{
					/* Check the range */
					local ok = false;
					
					local member = "";
					while (!ok)
					{
						member = getMemberByOrder(input);
						
						if (member=="")
						{
							::print("Invalid entry\n");
							::print("Enter the choice ["+
								minOrder+"-"+maxOrder+", 91, 92]: ");
							input = getline();
						}
						else
						{
							ok = true;
						}
					}
					
					/* edit the field */
					enterField(member);
				}	
			}
                        else
                        {
                            break;
                        }
		}
		
		//OK to provision..
		return true;
	}
	
		//Write the generate files
	//@param filename	Filename to write to
	//@param contents (string) to write to
	//@return true - ok, false - failed.
	function writeFile(filename, contents)
	{
		if (!fileexists(filename))
		{
			userlog(format("Writting off [%s] with [%s]", 
			filename, contents));
			try
			{
				local out = file(filename,"w");
				out.writes(contents);
				out.close();
			}
			catch (e)
			{
				userlog(format("Got exception [%s]", e));
				
				print(e+"\n");
				
				return false;
			}
		}
		else
		{
			userlog(format("File [%s] exists - not writting.",  filename));
		}
		
		return true;
	}
	
	//Set exec permissions to file
	//@param filename	filename
	function setExec(filename)
	{
		userlog(format("Setting 755 to [%s]",  filename));
		try
		{
			chmod(filename, "755");
		}
		catch (e)
		{
			userlog(format("Got exception [%s]", e));
			
			print(e+"\n");
			
			return false;
		}
		
		return true;
	}

}

