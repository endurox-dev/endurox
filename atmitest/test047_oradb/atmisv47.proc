/**
 * @brief Oracle PRO*C Sample database server
 *
 * @file atmisv47.proc
 */
/* -----------------------------------------------------------------------------
 * Enduro/X Middleware Platform for Distributed Transaction Processing
 * Copyright (C) 2009-2016, ATR Baltic, Ltd. All Rights Reserved.
 * Copyright (C) 2017-2023, Mavimax, Ltd. All Rights Reserved.
 * This software is released under one of the following licenses:
 * AGPL (with Java and Go exceptions) or Mavimax's license for commercial use.
 * See LICENSE file for full text.
 * -----------------------------------------------------------------------------
 * AGPL license:
 *
 * This program is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Affero General Public License, version 3 as published
 * by the Free Software Foundation;
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT ANY
 * WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A
 * PARTICULAR PURPOSE. See the GNU Affero General Public License, version 3
 * for more details.
 *
 * You should have received a copy of the GNU Affero General Public License along 
 * with this program; if not, write to the Free Software Foundation, Inc.,
 * 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
 *
 * -----------------------------------------------------------------------------
 * A commercial use license is available from Mavimax, Ltd
 * contact@mavimax.com
 * -----------------------------------------------------------------------------
 */

#include <stdio.h>
#include <stdlib.h>

#ifndef ORA_PROC
#include <ndebug.h>
#endif

#include <atmi.h>
#include <ndrstandard.h>
#include <ubf.h>
#include <ubfutil.h>
#include <test.fd.h>
#include <string.h>
#include "test47.h"

#include <sqlca.h> 


/*---------------------------Externs------------------------------------*/
/*---------------------------Macros-------------------------------------*/
#define PROC_RESTART do { \
        /* in dynamic mode Enduro/X xa libs may not track the point where\
         * SQL lost connection by it self\
         */\
        if (M_dyn && (-3135 == sqlca.sqlcode || -3114==sqlca.sqlcode))\
        {\
            NDRX_LOG(log_error, "Lost connection, let process to re-init");\
            if (tran_started)\
            {\
                tpabort(0);\
            }\
            tpexit();\
        }\
} while(0)

/*---------------------------Enums--------------------------------------*/
/*---------------------------Typedefs-----------------------------------*/
/*---------------------------Globals------------------------------------*/
/*---------------------------Statics------------------------------------*/
exprivate char M_errmark[16] = "TESTERROR";
exprivate long M_tout = 60;
exprivate int M_dyn = EXFALSE; /* are we in dynamic mode? */
/*---------------------------Prototypes---------------------------------*/

/**
 * Read "account" balance from DB
 * This will work with out transactions (as read only)
 */
void BALANCE (TPSVCINFO *p_svc)
{
    int ret=EXSUCCEED;
    UBFH *p_ub = (UBFH *)p_svc->data;
    int tran_started=EXFALSE;

    EXEC SQL BEGIN DECLARE SECTION;
    long h_balance;
    char h_accnum[1024];
    EXEC SQL END DECLARE SECTION;
    
    NDRX_LOG(log_debug, "%s got call", __func__);
    
    if (!tpgetlev())
    {
        /* start a transaction */
        if (EXSUCCEED!=tpbegin(M_tout, 0))
        {
            NDRX_LOG(log_error, "Failed to start transaction: %s", 
                    tpstrerror(tperrno));
            EXFAIL_OUT(ret);
        }
        tran_started=EXTRUE;
    }

    /* reallocate the buffer... */
    p_ub = (UBFH *)tprealloc((char *)p_ub, Bsizeof(p_ub) + 1024);
    
    if (NULL==p_ub)
    {
        EXFAIL_OUT(ret);
    }

    /* Just print the buffer */
    ndrx_debug_dump_UBF(log_debug, "BALANCE got call", p_ub);

    if (EXFAIL==Bget(p_ub, T_STRING_FLD, 0, h_accnum, 0))
    {
        NDRX_LOG(log_error, "TESTERROR: Failed to get T_STRING_FLD: %s", 
                 Bstrerror(Berror));
        ret=EXFAIL;
        goto out;
    }
    
    NDRX_LOG(log_info, "Search for account: %s", h_accnum);
    
    EXEC SQL SELECT balance INTO :h_balance
             FROM accounts
             WHERE accnum = :h_accnum;
    
    NDRX_LOG(log_info, "Result: %d", sqlca.sqlcode);
    
    if (sqlca.sqlcode != 0)
    {
        NDRX_LOG(log_error, "Failed to select: %d: %.70s", 
                sqlca.sqlcode, sqlca.sqlerrm.sqlerrmc);

        PROC_RESTART;
        EXFAIL_OUT(ret);
    }
    
    if (EXFAIL==Bchg(p_ub, T_LONG_FLD, 0, (char *)&h_balance, 0))
    {
        NDRX_LOG(log_error, "TESTERROR: Failed to set h_balance: %s", 
                 Bstrerror(Berror));
        ret=EXFAIL;
        goto out;
    }
    
out:

    if (tran_started)
    {
        if (EXSUCCEED==ret)
        {
            if (EXSUCCEED!=tpcommit(0))
            {
                NDRX_LOG(log_error, "Failed to commit: %s", tpstrerror(tperrno));
                ret=EXFAIL;
            }
        }
        
        if (EXFAIL==ret)
        {
            if (EXSUCCEED!=tpabort(0))
            {
                NDRX_LOG(log_error, "Failed to abort: %s", tpstrerror(tperrno));
            }
        }
    }

    tpreturn(  ret==EXSUCCEED?TPSUCCESS:TPFAIL,
                0L,
                (char *)p_ub,
                0L,
                0L);
}

/**
 * This service will make an account
 */
void ACCOPEN (TPSVCINFO *p_svc)
{
    int ret=EXSUCCEED;
    UBFH *p_ub = (UBFH *)p_svc->data;
    int tran_started=EXFALSE;
    EXEC SQL BEGIN DECLARE SECTION;
    long h_balance;
    char h_accnum[1024];
    EXEC SQL END DECLARE SECTION;
    TPTRANID trn;
    
    NDRX_LOG(log_debug, "%s got call", __func__);

    if (!tpgetlev())
    {
        /* start a transaction */
        if (EXSUCCEED!=tpbegin(M_tout, 0))
        {
            NDRX_LOG(log_error, "Failed to start transaction: %s", 
                    tpstrerror(tperrno));
            EXFAIL_OUT(ret);
        }
        tran_started=EXTRUE;
    }
    
    /* Just print the buffer */
    ndrx_debug_dump_UBF(log_debug, "ACCOPEN got call", p_ub);
    

    if (EXSUCCEED!=tpsuspend (&trn, 0))
    {
        NDRX_LOG(log_error, "%s: failed to suspend: %s", M_errmark, tpstrerror(tperrno));
        EXFAIL_OUT(ret);
    }

    if (EXSUCCEED!=tpresume (&trn, 0))
    {
        NDRX_LOG(log_error, "%s: failed to resume: %s", M_errmark, tpstrerror(tperrno));
        EXFAIL_OUT(ret);
    }

    /* suspend again, now resume with no optimization */
    if (EXSUCCEED!=tpsuspend (&trn, 0))
    {
        NDRX_LOG(log_error, "%s: failed to suspend: %s", M_errmark, tpstrerror(tperrno));
        EXFAIL_OUT(ret);
    }

    if (EXSUCCEED!=tpresume (&trn, TPTXNOOPTIM))
    {
        NDRX_LOG(log_error, "%s: failed to resume TPTXNOOPTIM: %s", M_errmark, tpstrerror(tperrno));
        EXFAIL_OUT(ret);
    }

    /* OK continue... */

    if (EXFAIL==Bget(p_ub, T_STRING_FLD, 0, h_accnum, 0))
    {
        NDRX_LOG(log_error, "TESTERROR: Failed to get T_STRING_FLD: %s", 
                 Bstrerror(Berror));
        ret=EXFAIL;
        goto out;
    }
    
    if (EXFAIL==Bget(p_ub, T_LONG_FLD, 0, (char *)&h_balance, 0))
    {
        NDRX_LOG(log_error, "TESTERROR: Failed to get h_balance: %s", 
                 Bstrerror(Berror));
        ret=EXFAIL;
        goto out;
    }
    
    NDRX_LOG(log_info, "Opening account: [%s] balance: [%ld]", 
            h_accnum, h_balance);
    
    
    EXEC SQL INSERT INTO accounts(accnum, balance)
        VALUES(:h_accnum, :h_balance);
    
    NDRX_LOG(log_info, "Result: %d", sqlca.sqlcode);
    
    if (sqlca.sqlcode != 0)
    {
        NDRX_LOG(log_error, "Failed to select: %d: %.70s", 
                sqlca.sqlcode, sqlca.sqlerrm.sqlerrmc);

        PROC_RESTART;
        EXFAIL_OUT(ret);
    }
    
out:
        
    if (tran_started)
    {
        if (EXSUCCEED==ret)
        {
            if (EXSUCCEED!=tpcommit(0))
            {
                NDRX_LOG(log_error, "Failed to commit: %s", tpstrerror(tperrno));
                ret=EXFAIL;
            }
        }
        
        if (EXFAIL==ret)
        {
            if (EXSUCCEED!=tpabort(0))
            {
                NDRX_LOG(log_error, "Failed to abort: %s", tpstrerror(tperrno));
            }
        }
    }

    tpreturn(  ret==EXSUCCEED?TPSUCCESS:TPFAIL,
                0L,
                (char *)p_ub,
                0L,
                0L);
}


/**
 * This service will make an account
 */
void ACCCLEAN (TPSVCINFO *p_svc)
{
    int ret=EXSUCCEED;
    int tran_started=EXFALSE;
    EXEC SQL BEGIN DECLARE SECTION;
    long h_balance;
    char h_accnum[1024];
    EXEC SQL END DECLARE SECTION;
    
    NDRX_LOG(log_debug, "%s got call", __func__);

    if (!tpgetlev())
    {
        /* start a transaction */
        if (EXSUCCEED!=tpbegin(M_tout, 0))
        {
            NDRX_LOG(log_error, "Failed to start transaction: %s", 
                    tpstrerror(tperrno));
            EXFAIL_OUT(ret);
        }
        tran_started=EXTRUE;
    }
    
    EXEC SQL DELETE FROM ACCOUNTS;
    
    NDRX_LOG(log_info, "Result: %d", sqlca.sqlcode);
    
    if (sqlca.sqlcode != 0 && sqlca.sqlcode != 100)
    {
        NDRX_LOG(log_error, "Failed to delete: %d: %.70s", 
                sqlca.sqlcode, sqlca.sqlerrm.sqlerrmc);

        PROC_RESTART;
        EXFAIL_OUT(ret);
    }
    
out:
        
    if (tran_started)
    {
        if (EXSUCCEED==ret)
        {
            if (EXSUCCEED!=tpcommit(0))
            {
                NDRX_LOG(log_error, "Failed to commit: %s", tpstrerror(tperrno));
                ret=EXFAIL;
            }
        }
        
        if (EXFAIL==ret)
        {
            if (EXSUCCEED!=tpabort(0))
            {
                NDRX_LOG(log_error, "Failed to abort: %s", tpstrerror(tperrno));
            }
        }
    }

    tpreturn(  ret==EXSUCCEED?TPSUCCESS:TPFAIL,
                0L,
                NULL,
                0L,
                0L);
}

/**
 * Fetch testing
 */
void FETCH (TPSVCINFO *p_svc)
{

    EXEC SQL BEGIN DECLARE SECTION;
    char h_typecode[17];
    EXEC SQL END DECLARE SECTION;
    int ret = EXSUCCEED;
    long rsplen = 0;
    char *odata;

    EXEC SQL DECLARE type_cursor CURSOR FOR
        SELECT TYPECODE
        FROM ACCOUNT_TYPES;

    if (sqlca.sqlcode != 0)
    {
        NDRX_LOG(log_error, "Failed to select: %d: %.70s",
                sqlca.sqlcode, sqlca.sqlerrm.sqlerrmc);
        EXFAIL_OUT(ret);
    }

    EXEC SQL OPEN type_cursor;

    if (sqlca.sqlcode != 0)
    {
        NDRX_LOG(log_error, "Failed to select: %d: %.70s",
                sqlca.sqlcode, sqlca.sqlerrm.sqlerrmc);
        EXFAIL_OUT(ret);
    }

    for ( ;; )
    {

        /* Fetching data */
        EXEC SQL FETCH type_cursor 
            INTO :h_typecode;

        if ( sqlca.sqlcode == 100 )
        {
            NDRX_LOG(log_debug, "EOF");
            goto out;
        }

        if ( sqlca.sqlcode != 0 )
        {
            NDRX_LOG(log_error, "Failed to fetch: %d: %.70s",
                sqlca.sqlcode, sqlca.sqlerrm.sqlerrmc);
            EXFAIL_OUT(ret);
        }

        /* Perform service call (to have suspend) */
        odata=NULL;
        if (EXSUCCEED!=tpcall("DEL", NULL, 0, &odata, &rsplen, 0))
        {
            NDRX_LOG(log_error, "Failed to call DEL: %s", tpstrerror(tperrno));
            EXFAIL_OUT(ret);
        }

    }

out:
    EXEC SQL CLOSE type_cursor;

    tpreturn(  ret==EXSUCCEED?TPSUCCESS:TPFAIL,
                0L,
                NULL,
                0L,
                0L);

}

/**
 * Do initialization
 */
int NDRX_INTEGRA(tpsvrinit)(int argc, char **argv)
{
    int ret = EXSUCCEED;
    char *p;
    NDRX_LOG(log_debug, "tpsvrinit called");
    
    if (NULL!=getenv(KILL_TEST_ENV))
    {
        NDRX_STRCPY_SAFE(M_errmark, "LOOPERR");
        M_tout = MAX_RSP;
    }

    if (NULL!=(p=getenv("NDRX_XA_DRIVERLIB")) && NULL!=strstr(p, "libndrxxaorad"))
    {
        M_dyn = EXTRUE;
    }

    if (EXSUCCEED!=tpopen())
    {
        NDRX_LOG(log_error, "Failed to open DB!");
        EXFAIL_OUT(ret);
    }
    
    if (EXSUCCEED!=tpadvertise("BALANCE", BALANCE))
    {
        NDRX_LOG(log_error, "Failed to initialize BALANCE!");
        EXFAIL_OUT(ret);
    }
    
    if (EXSUCCEED!=tpadvertise("ACCOPEN", ACCOPEN))
    {
        NDRX_LOG(log_error, "Failed to initialize ACCOPEN!");
        EXFAIL_OUT(ret);
    }
    
    if (EXSUCCEED!=tpadvertise("ACCCLEAN", ACCCLEAN))
    {
        NDRX_LOG(log_error, "Failed to initialize ACCCLEAN!");
        EXFAIL_OUT(ret);
    }

    if (EXSUCCEED!=tpadvertise("FETCH", FETCH))
    {
        NDRX_LOG(log_error, "Failed to initialize FETCH!");
        EXFAIL_OUT(ret);
    }
    
out:
    return ret;
}

/**
 * Do de-initialization
 */
void NDRX_INTEGRA(tpsvrdone)(void)
{
    NDRX_LOG(log_debug, "tpsvrdone called");
    
    tpclose();
    
}

/* vim: set ts=4 sw=4 et smartindent: */
