//
// Ubb config to Enduro/X converter
//

////////////////////////////////////////////////////////////////////////////////
// UBB Config, functions called by tmloadcf as flex & bison parses.
////////////////////////////////////////////////////////////////////////////////

//Filled values
M_values <- [];
M_resources <- {};
M_cur_section <- {};
M_cur_default <- {};
M_sections <- {};
M_default_cntr <-0;

//Add resource/keyword value
function tux_add_val(arg)
{
    print("Adding value: "+arg+"\n");
    M_values.append(arg);
}

//Add resource parameter
function tux_add_res_parm(arg)
{
    M_resources[arg] <-M_values;
    M_values<-[]; //reset
}

//Add section parameter
function tux_add_sect_parm(arg)
{
    local is_default=false;
    //Track all the defaults
    if (arg=="DEFAULT:")
    {
        arg="DEFAULT:"+M_default_cntr;
        M_default_cntr++;
        is_default = true;
    }

    M_cur_section[arg]<-{};
    M_cur_section["ORDER:"].append(M_cur_section[arg]);

    //Add link to previous default
    M_cur_section[arg]["DEFAULT:"]<-M_cur_default;
 
    //Refresh current default
    if (is_default)
    {
        M_cur_default = M_cur_section[arg];
    }
}

//Add keyword to parameter
function tux_add_sect_keyw(arg)
{   
    M_cur_section[arg] <- M_values;
    M_values<-[];
}

//Add section
function tux_add_sect(arg)
{
    M_sections[arg] <- {};
    //Special section to keep the parameter order
    M_sections[arg]["ORDER:"]  <- []
    M_cur_default <- {};
    M_cur_section = M_sections[arg];
    M_default_cntr=0;
}

////////////////////////////////////////////////////////////////////////////////
// Generator section
////////////////////////////////////////////////////////////////////////////////

//This will keep open handles
M_machines <- {};

//Generate Enduro/X configs.
function ex_generate(arg)
{
    //Open output objects for each of the machine
    if ("*MACHINES" in M_sections)
    {
        foreach(idx,val in M_sections["*MACHINES"])
        {
            if (val!="DEFAULT:")
            {
                M_machines[val]<-{};

                //str common part, should be home
                M_machines[val].app_home <- strcommon(M_sections["*MACHINES"]["APPDIR"][0]
                                    , M_sections["*MACHINES"]["TUXCONFIG"][0]);

                //difference part shall be bin suffix
                M_machines[val].app_bin <- strdiff(M_sections["*MACHINES"]["APPDIR"][0],
                                    M_machines[val].app_home);
                
                //get config directory, take the first, also this is guessing...
                M_machines[val].app_conf <- split(strdiff(M_sections["*MACHINES"]["TUXCONFIG"][0],
                                    M_machines[val].app_home), '/')[0];
               
                //TODO: mkdir conf (recursive) + open files there/
               
                M_machines[val].set_file <- file("set."+M_sections["*MACHINES"]["LMID"][0],"wb+");
                M_machines[val].ini_file <- file("app.ini."+M_sections["*MACHINES"]["LMID"][0],"wb+");
                M_machines[val].xml_file <- file("ndrxconfig.xml."+M_sections["*MACHINES"]["LMID"][0],"wb+");

                //Write initial infos to files
                M_machines[val].set_file.writes(@"
#/bin/bash
#
# @(#) Load this script in environment
#
export NDRX_APPHOME="+M_machines[val].app_home+@"
export NDRX_CCONFIG=$NDRX_APPHOME/"+M_machines[val].app_conf+@"
export PATH=$PATH:$NDRX_APPHOME/"+M_machines[val].app_bin+@"
export CDPATH=$CDPATH:.:$NDRX_APPHOME
");
                
            }
        }
    }

}